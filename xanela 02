/*
Este script mellora o anterior, facendo que os motores teñan que 
pasar por paro para poder acceder ó proximo estado, e incluindo
tamén dous finales de carrera para que o motor non este funcionando
todo o tempo.
Autor:Guillermo Salgueiro Chorén
Data:6/3/24
*/
// Definición de pines
#define rele_b 3
#define rele_s 9
#define pulsador 11
#define final_ab 12
#define final_ar 13

// Variables de control
bool activado;
int contador;
bool finalc_ab;
bool finalc_ar;

// Función de configuración (se ejecuta una vez al inicio)
void setup() {
  // Configuración de pines
  pinMode(rele_b, OUTPUT);
  pinMode(rele_s, OUTPUT);
  pinMode(pulsador, INPUT);

  // Inicialización de variables
  contador = 0;
}

// Función principal (se ejecuta continuamente en un bucle)
void loop() {
  // Lectura del estado del pulsador
  activado = digitalRead(pulsador);

  // Si el pulsador está activado
  if (activado == 1) {
    // Cambiar el estado del contador al siguiente (0, 1, 2, o 3)
    contador = (contador + 1) % 4;
    // Pequeño retardo para evitar rebotes
    delay(100);
    // Esperar hasta que el pulsador sea liberado
    while (digitalRead(pulsador) == 1) {
      delay(10);
    }
  }

  // Cambios de estado dos motores
  switch (contador) {
    //Parado
    case 0:
    case 2:
    parar();
    finalc_ab=0;
    finalc_ar=0;
    break;
    //Baixando
    case 1:
      if (digitalRead(final_ab) == 1 or finalc_ab==1) {
        parar();
        /*Sale do if porque se activa o final de carrera 
        e establecese o estado 2 para que o siguiente motor sexa 
        o de subida*/
        finalc_ab++;
        contador=2;
      } else {
        bajar();
      }
    break;
    //Subindo
    case 3:
      if (digitalRead(final_ar) == 1 or finalc_ar==1) {
        parar();
        /*Sale do if porque se activa o final de carrera 
        e establecese o estado 0 para que o siguiente motor sexa 
        o de baixada*/
        finalc_ar++;
        contador=0;
      } else {
        subir();
      }
    break;
  }
}

// Funciones complementarias

// Mover hacia arriba
void subir() {
  digitalWrite(rele_b, LOW);
  digitalWrite(rele_s, HIGH);
}

// Mover hacia abajo
void bajar() {
  digitalWrite(rele_s, LOW);
  digitalWrite(rele_b, HIGH);
}

// Detener el movimiento
void parar() {
  digitalWrite(rele_s, LOW);
  digitalWrite(rele_b, LOW);
}
